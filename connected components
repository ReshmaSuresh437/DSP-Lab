#include <stdio.h>
#include <stdlib.h>
struct node
{
	int vertex;
  	struct node* next;
};
struct node* create(int v);
struct Graph
{
	int n;
  	int* visited;
  	struct node** adjList;
};

struct node* create(int v)
{
  	struct node* newNode = malloc(sizeof(struct node));
  	newNode->vertex = v;
  	newNode->next = NULL;
  	return newNode;
}
struct Graph* createGraph(int vertices)
{
  	struct Graph* graph = malloc(sizeof(struct Graph));
  	graph->n = vertices;
  	graph->adjList = malloc(vertices * sizeof(struct node*));
	graph->visited = malloc(vertices * sizeof(int));
	for (int i = 0; i < vertices; i++)
	{
    		graph->adjList[i] = NULL;
    		graph->visited[i] = 0;
  	}
  	return graph;
}

void addEdge(struct Graph* graph, int o, int d)
{
	struct node* newNode = create(d);
 	newNode->next = graph->adjList[o];
  	graph->adjList[o] = newNode;
  	newNode = create(o);
 	 newNode->next = graph->adjList[d];
  	graph->adjList[d] = newNode;
}

void dfs(struct Graph* graph, int vertex)
{
  	struct node* adjList = graph->adjList[vertex];
  	struct node* temp = adjList;
	graph->visited[vertex] = 1;
  	while (temp != NULL)
	{
    		int c = temp->vertex;
    		if (graph->visited[c] == 0)
  		{
     			dfs(graph, c);
    		}
   		temp = temp->next;
  	}
}

int main(int argc, char *argv[])
{
	int count=0;
  	FILE *file = fopen(argv[1],"r");
  	printf("File Name : %s\n", argv[1]);
  	while  (!feof(file))
	{
  		int v = fgetc(file) - 48;
  		printf("\nnumber of vertices: %d\n",v);
  		int e = fgetc(file) - 48;
  		printf("\nnumber of edges: %d\n",e);
  		struct Graph* graph = createGraph(v+1);
  		
		for(int i=0;i<e;i++)
  		{
        			int a = fgetc(file)-48;
          			int b = fgetc(file)-48;
          			printf("\nEdge number %d is %d->%d\n",i,a,b);
        			addEdge(graph, a, b);
        			addEdge(graph, b, a);
  		}
  		for(int j=1;j<=v;j++)
  		{
      			if(graph->visited[j]!=1)
      			{
          				dfs(graph,j);
          				count++;
      			}
  		}
  		printf("\nConnected Components: %d\n", count);
		return 0;
  	}
}
