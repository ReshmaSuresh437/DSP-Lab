BUILD MAX HEAP
#include <stdio.h>
#include <stdlib.h>
void maxheapify(int *, int, int);
int* buildmaxheap(int *, int);
void main()
{
    int a[] = {8,13,9,5,12,15,7,4,0,6,2,1 };// given array
    int n = sizeof(a)/sizeof(a[0]);// array size calculation
    int *m = buildmaxheap(a, n);
    printf("The max heap is\n");
    for (int i=0;i<n;i++)//to print the max heap 
    {
       printf("%d\n", m[i]);
    }
}
int* buildmaxheap(int a[], int n)
{
    int size= n;
    int i;
    for(i= n/2;i>=0;i--) 
    {
       maxheapify(a,i,size);
    }
    return a;
}

void maxheapify(int a[], int i, int heapsize)
{
     int temp,large,l,r,k;
     l= (2*i+1);
     r= ((2*i)+2);
     if(l>=heapsize)
     {
          return;
     }
     else
     {
          if((l<(heapsize)) && (a[l]>a[i])) 
          {
               large= l;
          }
          else
          {
               large= i;
          }
         if ((r<(heapsize)) && (a[r]>a[large]))  
         {
               large=r;
         }
        if(large!=i) 
         {
                temp= a[i];
                a[i]= a[large];
                a[large]= temp;
                maxheapify(a,large,heapsize);
          }
      }
}
--------------------------------------------------
--------------------------------------------------
HEAP_EXTRACT_MAX
#include <stdio.h>
#include <stdlib.h>
void maxheapify(int *, int, int);
int* buildmaxheap(int *, int);
int heap_extract_max(int *, int);
void main()
{
    int a[] = {8,13,9,5,12,15,7,4,0,6,2,1 };// given array
    int n = sizeof(a)/sizeof(a[0]);// array size calculation
    int *m = buildmaxheap(a, n);
    printf("The max heap is\n");
    for (int i=0;i<n;i++)//to print the max heap 
    {
       printf("%d\n", m[i]);
    }
    int t= heap_extract_max(a,n);
    printf("The Maximum element is %d\n", t);
}
int* buildmaxheap(int a[], int n)
{
    int size= n;
    int i;
    for(i= n/2;i>=0;i--) 
    {
       maxheapify(a,i,size);
    }
    return a;
}

void maxheapify(int a[], int i, int heapsize)
{
     int temp,large,l,r,k;
     l= (2*i+1);
     r= ((2*i)+2);
     if(l>=heapsize)
     {
          return;
     }
     else
     {
          if((l<(heapsize)) && (a[l]>a[i])) 
          {
               large= l;
          }
          else
          {
               large= i;
          }
         if ((r<(heapsize)) && (a[r]>a[large]))  
         {
               large=r;
         }
        if(large!=i) 
         {
                temp= a[i];
                a[i]= a[large];
                a[large]= temp;
                maxheapify(a,large,heapsize);
          }
      }
}
int heap_extract_max(int a[], int size)
{
     int max= a[0];
     size -= 1;
    for (int i=(size/2)-1;i>=0;i--)
    {
        maxheapify(a,i,size);
    }
    return max;
}
---------------------------------------------------------------------
---------------------------------------------------------------------
HEAPSORT

#include<stdio.h>
#include<stdlib.h>
void swap(int *a, int *b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
  }
void heapify(int arr[], int n, int i)
{
    int largest = i; 
    int l = 2 * i + 1; 
    int r = 2 * i + 2; 
    if (l < n && arr[l] > arr[largest])
    {
        largest = l;
    }
    if (r < n && arr[r] > arr[largest])
    {
        largest = r;
    }
    if (largest != i) 
    {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}
void heapSort(int arr[], int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--)
    {
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}
void printArray(int arr[], int n)
{
    for (int i = 0; i < n; ++i)
    {   
        printf("%d ",arr[i]);
    }
    printf("\n");
}
int main()
{
    int arr[] = {8,13,9,5,12,15,7,4,0,6,2,1 };
    int n = sizeof(arr) / sizeof(arr[0]);
    heapSort(arr, n);
    printf("Sorted array is:\n");
    printArray(arr, n);
} 




