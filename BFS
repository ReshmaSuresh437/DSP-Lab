#include<stdio.h>
#include<stdlib.h>
#define max 100  
int q[max], front = -1, rear = -1, n;
int adj[max][max];          
int visited[max];             
void push(int v)
{
   	if(rear == max-1)
      	printf("Queue overflow\n");
   	else
   	{
     		 if(front == -1)
      		{
         			front = 0;
      		}
      		++rear;
      		q[rear] = v ;
   	}
}

int pop()
{
    	int item;
    	if(front == -1 || front > rear)
    	{
        		printf("Queue Underflow\n");
        		exit(1);
   	}
   
  	item = q[front];
   	++front;
   	return item;
}
 int isEmpty_queue()
{
   	if(front == -1 || front > rear)
      		return 1;
   	else
      		return 0;
}
void create_graph()
{
	int count,max_edge,orig,dest;
 	printf("Enter the number of vertices: ");
  	scanf("%d",&n);
   	max_edge = n*(n-1);         
 	for(count=1; count<=max_edge; count++)
   	{
      		printf("Enter edge %d( -1 -1 to quit ) : ",count);
      		scanf("%d %d",&orig,&dest);
 		if((orig == -1) && (dest == -1))
        			 break;
 		if(orig>=n || dest>=n || orig<0 || dest<0)
      		{
         			printf("invalid edge!\n");
         			count--;
      		}
      		else
     		 {
         			adj[orig][dest] = 1;
         			adj[dest][orig] = 1; 
      		}
   	}
}
void bfs()
{
    	int v, i;
  	for( v=0; v<n; v++)
   	{
      		visited[v] = 0;
   	}
   	printf("Enter the start vertex for BFS: \n");
   	scanf("%d", &v);
   	push(v);
   	while(!isEmpty_queue())
   	{
     	 	v = pop( );
       		if(visited[v])              
           		continue;
		printf("%d ",v);
      		visited[v] = 1;
		for(i=0; i<n; i++)
      		{
         		if(adj[v][i] == 1 && visited[i] == 0)
            		push(i);
      		}
   	}
   	printf("\n");
}
  
int main()
{
   	create_graph();
   	bfs();
   	return 0;
}
