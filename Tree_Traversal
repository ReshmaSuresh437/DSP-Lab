#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100 
struct node
{
    struct node *left;
    int data;
    struct node *right;
};
struct Stack 
{ 
    int size; 
    int top; 
    struct node* *array; 
};
void insert(struct node **p,int num)
{
    if((*p)==NULL)
    {
        (*p)=malloc(sizeof(struct node));
        (*p)->left = NULL;
        (*p)->right = NULL;
        (*p)->data = num;
        return;
    }
    else
    {
        if(num==(*p)->data)
        {
            printf("\nREPEATED ENTRY ERROR VALUE REJECTED\n");
            return;
        }
        if(num<(*p)->data)
        {
            insert(&((*p)->left),num);
        }
        else
        {
            insert(&((*p)->right),num);
        }
    }
    return;
}
 
struct Stack* createStack(int size) 
{ 
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack)); 
    stack->size = size; 
    stack->top = -1; 
    stack->array = (struct node**)malloc(stack->size * sizeof(struct node*)); 
    return stack; 
} 
  
int isFull(struct Stack* stack) 
{ 
    return stack->top - 1 == stack->size; 
} 
  
int isEmpty(struct Stack* stack) 
{ 
    return stack->top == -1; 
} 
  
void push(struct Stack* stack, struct node* node) 
{ 
    if (isFull(stack)) 
        return; 
    stack->array[++stack->top] = node; 
} 
  
struct node* pop(struct Stack* stack) 
{ 
    if (isEmpty(stack)) 
        return NULL; 
    return stack->array[stack->top--]; 
} 
void postorder(struct node* root) 
{ 
    if (root == NULL) 
        return; 
 
    struct Stack* s1 = createStack(MAX_SIZE); 
    struct Stack* s2 = createStack(MAX_SIZE); 
  
    push(s1, root); 
    struct node* node; 
  
    while (!isEmpty(s1)) 
    { 
        node = pop(s1); 
        push(s2, node); 
        if (node->left) 
            push(s1, node->left); 
        if (node->right) 
            push(s1, node->right); 
    } 
  
    while (!isEmpty(s2)) 
    { 
        node = pop(s2); 
        printf("%d ", node->data); 
    } 
} 

void preorder(struct node *p)
{
    if(p!=NULL)
    {
        printf("%d ",p->data);
        preorder(p->left);
        preorder(p->right);
    }
    else
    return;
}

void inorder(struct node *p)
{
    if(p!=NULL)
    {
        inorder(p->left);
        printf("%d ",p->data);
        inorder(p->right);
    }
    else
    return;
}
 
int main()
{
 
    struct node *ptr;
    int no,i,num;
 
    ptr = NULL;
 
    printf("Enter the number of nodes to add to the tree: \n");
    scanf("%d",&no);
    printf("Enter the values: ");
    for(i=0;i<no;i++)
    {
      
        scanf("%d",&num);
        insert(&ptr,num);
    }
    printf("\nPREORDER TRAVERSAL\n");
    preorder(ptr);
    
    printf("\nINORDER TRAVERSAL\n");
    inorder(ptr);
 
 
    printf("\nPOSTORDER TRAVERSAL\n");
    postorder(ptr);
 
}
 
