#include<stdio.h>
#include<stdlib.h>
#define max 100
int adj[max][max], n;
int top = -1;
int s1[max]; 
int s2[max];
void push(int v)
{
        	if(top == (max-1))
        	{
                	printf("\nStack Overflow\n");
               	 return;
        	}
        	top=top+1;
        	s2[top] = v;
 }

int pop()
{
        	int v;
        	if(top == -1)
        	{
                	printf("\nStack Underflow\n");
                	exit(1);
        	}
        	else
        	{
                	v = s2[top];
                	top=top-1;
                	return v;
        	}
}

int check_stack( )
{
  	if(top == -1)
          		return 1;
  	else
          		return 0;
}

 
void create_graph()
{
        	int i,max_edges,orig,dest;
 	printf("\nEnter the number of nodes : ");
        	scanf("%d",&n);
        	max_edges=n*(n-1);
 	for(i=1;i<=max_edges;i++)
        	{
                	printf("\nEnter edge %d( -1 -1 to quit ) : ",i);
                	scanf("%d %d",&orig,&dest);
		if( (orig == -1) && (dest == -1) )
                        		break;
 
                	if( orig >= n || dest > n || orig<0 || dest<0)
                	{
                        	printf("\nInvalid edge!\n");
                        		i--;
                	}
                	else
                	{
                        	adj[orig][dest] = 1;
                        	adj[dest][orig] = 1;
                       }
        }
}
	
void dfs(int v)
{
        	int i;
        	push(v);
        	while(!check_stack())
        	{
                	v = pop();
                	if(s1[v]==1)
                	{
                        	printf("%d ",v);
                        	s1[v]=2;
               	}
                	for(i=n; i>=0; i--)
                	{
                        	if(adj[v][i]==1 && s1[i]==1)
                                		push(i);
                	}
        }
}
 
void dfs_traversal()
{
       	 int v;
        	for(v=0; v<=n; v++)
                	s1[v]=1;
	printf("\nEnter starting node for Depth First Search : ");
        	scanf("%d",&v);
        	dfs(v);
        	printf("\n");
}

int main()
{
        	create_graph();
        	dfs_traversal();
}
