#include <ctype.h>
#include <stdio.h>
char s[100];
int top = -1; /* Global declarations */

/* Function to remove spaces from given string */
void RemoveSpaces(char* source) 
{
	char* i = source;
	char* j = source;
	while(*j != 0)
	{
 		*i = *j++;
 		if(*i != ' ')
 			i++;
	}
 	*i = 0;
}

/* Function for PUSH operation */
void push(char data) 
{ 
 	s[++top] = data;
}
/* Function for POP operation */
char pop() 
{ 
 	return (s[top--]);
}

/* Function for precedence */
int pr(char data) 
{ 
 	switch (data) 	
	{
	case '#':
 		  return 0;
 	case '(':
 		  return 1;
 	case '+':
 	case '-':
 		  return 2;
 	case '*':
 	case '/':
 		  return 3;
 	}
}

/*
* Function to convert from infix to postfix expression
*/
void infix_to_postfix(char *in, char *po) 
{
 	char ch, data;
 	int i = 0, k = 0;
 	RemoveSpaces(in);
 	push('#');
 	while ((ch = in[i++]) != '\n')
	 {
 		if (ch == '(')
 			push(ch);
 		else if (isalnum(ch))
 			po[k++] = ch;
 		else if (ch == ')') 
		{
 			while (s[top] != '(')
 			po[k++] = pop();
			 data= pop(); /* Remove ( *//* Operator */
 		} 
		else 
		{ 
 			while (pr(s[top]) >= pr(ch))
 			po[k++] = pop();
 		push(ch);
		}
 	}
 	while (s[top] != '#') /* Pop from stack till empty */
 		po[k++] = pop();
 
	po[k] = 0; /* Make postfix as valid string */
}

/*
* Function to evaluate a postfix expression
*/
int eval_postfix(char *po) 
{
 	char ch;
 	int i = 0, op1, op2;
 	while((ch = po[i++]) != 0) 
	{
 		if(isdigit(ch)) 
 		push(ch-'0'); /* Push the operand */
		else 
		{ 		/* Operator,pop two operands */
 			op2 = pop();
 			op1 = pop();
 			switch(ch) 
			{
 				case '+' : push(op1+op2); 
 					   break;
 				case '-' : push(op1-op2); 
 				           break;
 				case '*' : push(op1*op2);
 					   break;
                             	case '/' : push(op1/op2);
 					   break;
				case '^' : push(op1^op2);
					   break;
 			}
 		}
	 }
	return s[top];
}

void main()    		/* Main Program */
{ 
 	char in[50], po[50];
 	printf("\nInput the infix expression: ");
 	fgets(in, 50, stdin);
 	infix_to_postfix(in, po);
	printf("\nGiven Infix Expression: %sPostfix Expression: %s", in, po);
 	top = -1;
 	printf("\nResult of evaluation of postfix expression : %d\n", eval_postfix(po));
}
